name: Auto Release with Version Bump
on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'

permissions:
  contents: write
  
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run build
      
    - name: Package extension
      run: npm run package
      
    - name: Get version from manifest
      id: get_version
      run: |
        VERSION=$(node -p "require('./manifest.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Extension version: v$VERSION"
        
    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "refs/tags/${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Git tag
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ steps.get_version.outputs.version }}
        git push origin ${{ steps.get_version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      if: steps.check_tag.outputs.exists == 'false'
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## What's Changed
          
          Automatic release for version ${{ steps.get_version.outputs.version }}
          
          ### Installation
          1. Download the `gemini-search.zip` file below
          2. Extract the contents
          3. Load the extension in Chrome via `chrome://extensions/` in developer mode
          
          ### Features
          - Smart bang redirects (!g, !yt, !ddg, !ch, !pr, etc.)
          - Default Gemini AI integration
          - Context menu "Search with Gemini" option
          - Privacy-first local processing
          
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.get_version.outputs.version }}
        artifacts: ./gemini-search.zip
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Increment version for next release
      if: steps.check_tag.outputs.exists == 'false' && !contains(github.event.head_commit.message, '[skip version bump]')
      run: |
        echo "Incrementing version for next development cycle..."
        
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Determine version increment type (default to patch)
        INCREMENT_TYPE="patch"
        if [[ "${{ github.event.head_commit.message }}" == *"[major]"* ]]; then
          INCREMENT_TYPE="major"
        elif [[ "${{ github.event.head_commit.message }}" == *"[minor]"* ]]; then
          INCREMENT_TYPE="minor"
        fi
        
        echo "Incrementing $INCREMENT_TYPE version..."
        
        # Increment version using npm version
        npm version $INCREMENT_TYPE --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"
        
        # Sync manifest.json with package.json version
        node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('./manifest.json', 'utf8'));
          const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
          manifest.version = pkg.version;
          fs.writeFileSync('./manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          console.log('Updated manifest.json to version:', pkg.version);
        "
        
        # Check if there are actually changes to commit
        if git diff --quiet package.json manifest.json; then
          echo "No version changes detected, skipping commit"
          exit 0
        fi
        
        # Commit and push the version bump
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json manifest.json
        git commit -m "chore: bump version to v$NEW_VERSION [skip ci]"
        
        # Push with retry logic
        for i in {1..3}; do
          if git push origin HEAD:${{ github.ref_name }}; then
            echo "Successfully pushed version bump"
            break
          else
            echo "Push failed, attempt $i/3"
            sleep 2
            git pull --rebase origin ${{ github.ref_name }}
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update existing release
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "Tag ${{ steps.get_version.outputs.version }} already exists. Skipping release creation."
        echo "If you want to create a new release, please update the version in manifest.json"
        
    - name: Summary
      if: always()
      run: |
        echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag exists**: ${{ steps.check_tag.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.check_tag.outputs.exists }}" == "false" ]]; then
          echo "- **Release created**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Version bumped**: ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Release created**: ⏭️ (skipped)" >> $GITHUB_STEP_SUMMARY
          echo "- **Version bumped**: ⏭️ (skipped)" >> $GITHUB_STEP_SUMMARY
        fi